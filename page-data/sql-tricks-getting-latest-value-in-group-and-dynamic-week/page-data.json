{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/sql-tricks-getting-latest-value-in-group-and-dynamic-week","result":{"data":{"post":{"__typename":"MdxPost","slug":"/sql-tricks-getting-latest-value-in-group-and-dynamic-week","title":"SQL Tricks - Getting latest value in Group and Dynamic Week","date":"30.09.2020","tags":[{"name":"SQL","slug":"sql"}],"description":"Simple hive query tricks to avoid doing lots of steps & typing when getting Getting the latest value of a group (combined with sums of other columns) and dynamic week generation for each date record.","canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"SQL Tricks - Getting latest value in Group and Dynamic Week\",\n  \"date\": \"2020-09-30T00:00:00.000Z\",\n  \"description\": \"Simple hive query tricks to avoid doing lots of steps & typing when getting Getting the latest value of a group (combined with sums of other columns) and dynamic week generation for each date record.\",\n  \"tags\": [\"SQL\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"1. Getting the latest value along with SUM\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"without window function or CTE\")), mdx(\"p\", null, \"I recently had to work on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bid_modifier\"), \" data for our Search Engine Marketing (SEM) bidding. I have a daily summary table which consist of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bid_modifier\"), \" column.\"), mdx(\"p\", null, \"Take the table below as an example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"date INT, -- yyyymmdd format \\nadgroup_id INT, \\nbid_modifier DOUBLE, \\ncost INT, \\nrevenue INT\\n\")), mdx(\"p\", null, \"I want to produce a table with adgroup_id dimension, latest bid_modifier value, and SUM of cost & revenue. There are multiple alternatives to do this, but most of them require multiple steps:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"create a CTE to get the bid_midifier for latest ymd, then join it with the table that sums the other columns.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"create a CTE to rank the rows (partition by adgroup_id order by date DESC) and then select the data \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"WHERE rank = 1\"), \", and then join it with another cte that contains the sum of other columns\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"and many more.\")), mdx(\"p\", null, \"I was too lazy, so I tried to come up with a hack. I ended up doing this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"SELECT \\n    adgroup_id\\n    SUBSTR(MAX(CONCAT(date,bid_modifier)), 9, MAX(CONCAT(date,bid_modifier))+1) AS latest_bid_modifier\\n    SUM(cost),\\n    SUM(revenue)\\nFROM ...\\nGROUP BY \\n    adgroup_id\\n\")), mdx(\"p\", null, \"This particular line\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"SUBSTR(MAX(CONCAT(date,bid_modifier)), 9, MAX(CONCAT(date,bid_modifier))+1) \\n\")), mdx(\"p\", null, \"will sort the data based on the max date, and then it will be appended with the value of bid_modifier, and I take only the chars after the date part. Hence, I got the latest value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bid_modifier\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MAX(CONCAT(date,bid_modifier))+1\"), \" is used because the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bid_modifier\"), \" column don't have a fixed total chars. It could be 0 (1 char), or 1.5 (3 chars), or 4 chars too. Therefore it's better to have a dynamic bound for the substring.\"), mdx(\"h3\", null, \"2. Generating Dynamic Week\"), mdx(\"p\", null, \"For each day, I want to know what was the total value from the past week, a week ago, two weeks ago, and so on. But in this case, I need the week to be generated dynamically, instead of the default week grouping that will always start and end on the same day. I want 1 week to be define as a group of 7 day, starting from the last day.\"), mdx(\"p\", null, \"There was an existing solution, but I found it quite ugly, because I would need to define all possible cases. It's something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"CASE \\n    WHEN DATEDIFF(date, CURRENT_DATE()) < 7 THEN 0\\n    WHEN DATEDIFF(date, CURRENT_DATE()) < 14 THEN 1\\n    WHEN DATEDIFF(date, CURRENT_DATE()) < 21 THEN 2\\n    ...\\nEND AS num_weeks_ago\\n\")), mdx(\"p\", null, \"I noticed that it could be simplified into:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"DATEDIFF(date, CURRENT_DATE()) DIV 7 AS num_weeks_ago\\n\")), mdx(\"p\", null, \"If you need to run in on a workflow, you can replace the  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CURRENT_DATE()\"), \" with the date parameter, so that you're not restricted to only calculating the value from the current date.\"), mdx(\"p\", null, \"By using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DIV\"), \", I will always get the integer value of from the date difference operation result that can be divided by 7, which is the week!\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"1. Getting the latest value along with SUM without window function or CTE I recently had to work on  bid_modifier  data for our Searchâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/sql-tricks-getting-latest-value-in-group-and-dynamic-week","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}